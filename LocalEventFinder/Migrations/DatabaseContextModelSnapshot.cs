// <auto-generated />
using System;
using LocalEventFinder.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalEventFinder.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventPerformer", b =>
                {
                    b.Property<int>("EventsEventId")
                        .HasColumnType("int");

                    b.Property<int>("PerformersPerformerId")
                        .HasColumnType("int");

                    b.HasKey("EventsEventId", "PerformersPerformerId");

                    b.HasIndex("PerformersPerformerId");

                    b.ToTable("EventPerformer");
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "All kinds of music events",
                            IconUrl = "music_icon.png",
                            Name = "Music"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Art exhibitions and shows",
                            IconUrl = "art_icon.png",
                            Name = "Art"
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LocationLatitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LocationLongitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int>("RsvpCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1,
                            Description = "Join us for a night of rock music!",
                            EventDateTime = new DateTime(2024, 11, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3421),
                            ImageUrl = "rock_concert.jpg",
                            LocationAddress = "123 Main St, Los Angeles, CA",
                            LocationLatitude = 34.0522m,
                            LocationLongitude = -118.2437m,
                            LocationName = "Downtown Arena",
                            OrganizerId = 1,
                            RsvpCount = 0,
                            Title = "Rock Concert"
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2,
                            Description = "Explore contemporary art by local artists.",
                            EventDateTime = new DateTime(2024, 12, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3431),
                            ImageUrl = "art_exhibition.jpg",
                            LocationAddress = "456 Art St, Los Angeles, CA",
                            LocationLatitude = 34.0522m,
                            LocationLongitude = -118.2437m,
                            LocationName = "City Gallery",
                            OrganizerId = 2,
                            RsvpCount = 0,
                            Title = "Art Exhibition"
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.EventSubmission", b =>
                {
                    b.Property<int>("EventSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventSubmissionId"));

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("EventSubmissions");

                    b.HasData(
                        new
                        {
                            EventSubmissionId = 1,
                            SubmissionDate = new DateTime(2024, 10, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3452),
                            SubmissionStatus = "approved",
                            UserId = 1
                        },
                        new
                        {
                            EventSubmissionId = 2,
                            SubmissionDate = new DateTime(2024, 10, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3454),
                            SubmissionStatus = "pending",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Organizer", b =>
                {
                    b.Property<int>("OrganizerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerId"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizerId");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            OrganizerId = 1,
                            ContactInformation = "info@cityconcerts.com",
                            OrganizerName = "City Concerts",
                            OrganizerType = "Organization"
                        },
                        new
                        {
                            OrganizerId = 2,
                            ContactInformation = "contact@localartscouncil.org",
                            OrganizerName = "Local Arts Council",
                            OrganizerType = "Organization"
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Performer", b =>
                {
                    b.Property<int>("PerformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformerId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformerId");

                    b.ToTable("Performers");

                    b.HasData(
                        new
                        {
                            PerformerId = 1,
                            Age = 30,
                            Name = "John Doe",
                            SharedPlatform = "Instagram"
                        },
                        new
                        {
                            PerformerId = 2,
                            Age = 25,
                            Name = "Jane Smith",
                            SharedPlatform = "YouTube"
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.SocialShare", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShareTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("SharedPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShareId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialShares");

                    b.HasData(
                        new
                        {
                            ShareId = 1,
                            EventId = 1,
                            ShareTimestamp = new DateTime(2024, 10, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3470),
                            SharedPlatform = "Facebook",
                            UserId = 1
                        },
                        new
                        {
                            ShareId = 2,
                            EventId = 2,
                            ShareTimestamp = new DateTime(2024, 10, 4, 11, 20, 46, 712, DateTimeKind.Utc).AddTicks(3472),
                            SharedPlatform = "Twitter",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventPreferences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LocationLatitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("LocationLongitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "johndoe@example.com",
                            EventPreferences = "[\"Concerts\",\"Exhibitions\"]",
                            Interests = "[\"Music\",\"Sports\"]",
                            LocationLatitude = 34.0522m,
                            LocationLongitude = -118.2437m,
                            Name = "John Doe",
                            ProfilePictureUrl = "http://example.com/johndoe.jpg",
                            Role = "User"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "bob@example.com",
                            EventPreferences = "[\"Concerts\",\"Exhibitions\"]",
                            Interests = "[\"Music\",\"Sports\"]",
                            LocationLatitude = 34.0522m,
                            LocationLongitude = -118.2437m,
                            Name = "Bob Brown",
                            ProfilePictureUrl = "http://example.com/johndoe.jpg",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("EventPerformer", b =>
                {
                    b.HasOne("LocalEventFinder.Model.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalEventFinder.Model.Entities.Performer", null)
                        .WithMany()
                        .HasForeignKey("PerformersPerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Event", b =>
                {
                    b.HasOne("LocalEventFinder.Model.Entities.Category", null)
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalEventFinder.Model.Entities.Organizer", null)
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalEventFinder.Model.Entities.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.EventSubmission", b =>
                {
                    b.HasOne("LocalEventFinder.Model.Entities.User", null)
                        .WithMany("EventSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.SocialShare", b =>
                {
                    b.HasOne("LocalEventFinder.Model.Entities.Event", null)
                        .WithMany("SocialShares")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalEventFinder.Model.Entities.User", null)
                        .WithMany("SocialShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Event", b =>
                {
                    b.Navigation("SocialShares");
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.Organizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("LocalEventFinder.Model.Entities.User", b =>
                {
                    b.Navigation("EventSubmissions");

                    b.Navigation("Events");

                    b.Navigation("SocialShares");
                });
#pragma warning restore 612, 618
        }
    }
}
